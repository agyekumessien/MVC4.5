@using MainProgram.Core.Resources
@using MainProgram.Edm
@using Microsoft.AspNet.Identity

@model MainProgram.Edm.JqJava
@using MainProgram.Models


<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Dashboard </title>
    @Styles.Render("~/Content/css")
    <link href="~/Content/Intellisence/css/jquery-ui.min.css" rel="stylesheet" />
    <script src="~/Content/Intellisence/js/jquery-1.10.2.min.js"></script>
    <script src="~/Content/Intellisence/js/jquery-ui.min.js"></script>


    <link href="~/Content/css/style.css" rel="stylesheet" />
    <link href="~/Content/css/Custom.css" rel="stylesheet" />
    <link href="~/Content/css/bootstrap.css" rel="stylesheet" />





    <!-- Bootstrap 3.3.2 -->
    <link href="~/Content/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <!-- FontAwesome 4.3.0 -->
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
    <!-- Ionicons 2.0.0 -->
    <link href="http://code.ionicframework.com/ionicons/2.0.0/css/ionicons.min.css" rel="stylesheet" type="text/css" />
    <!-- Theme style -->
    <link href="~/Content/theme/dist/css/AdminLTE.min.css" rel="stylesheet" />
    <!-- AdminLTE Skins. Choose a skin from the css/skins
         folder instead of downloading all of them to reduce the load. -->
    <link href="~/Content/theme/dist/css/skins/_all-skins.min.css" rel="stylesheet" />
    <!-- iCheck -->
    <link href="~/Content/theme/plugins/iCheck/flat/blue.css" rel="stylesheet" />

    <!-- Morris chart -->
    <link href="~/Content/theme/plugins/morris/morris.css" rel="stylesheet" />
    <!-- jvectormap -->
    <link href="~/Content/theme/plugins/jvectormap/jquery-jvectormap-1.2.2.css" rel="stylesheet" />
    <!-- Date Picker -->
    <link href="~/Content/theme/plugins/datepicker/datepicker3.css" rel="stylesheet" />
    <!-- Daterange picker -->
    <link href="~/Content/theme/plugins/daterangepicker/daterangepicker-bs3.css" rel="stylesheet" />
    <!-- bootstrap wysihtml5 - text editor -->
    <link href="~/Content/theme/plugins/bootstrap-wysihtml5/bootstrap3-wysihtml5.min.css" rel="stylesheet" />




    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google Font -->
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic">

    @{

        Layout = "~/Views/Shared/_LayoutN.cshtml";
    }

</head>
<body>
    <section class="hero is-info is-fullheight is-bold">








        <div style="width:100%; margin-right:0px; padding-right:0px; margin-top:10px; text-align:center; background-color:#fff">
            <div class="panel2" style="width: 100%; padding-left: 0px; padding-right: 0px;">
                <div class="row mt-4 mb-6 mb-12">

                    <div class="hero-body   mt-4 mb-6 mb-12" style="background-color: #fff; margin-right:0px; padding-right:0px; text-align:center">

                        <div class="wrapper">



                            <div class="content-wrapper" style=" margin-left: 0px; width:100%; top:0px;">




                                <!-- left sidebar-->
                                <div id="fadeshow1" class="left" style="width: 30%;  float:left; top:0px; background-color:#fff">
                                    <aside style="background-color:#fff">
                                        <!-- sidebar: style can be found in sidebar.less -->
                                        <section style="background-color:#fff; padding-left:10px; padding-right:30px">
                                            <!-- search form -->

                                            <fieldset style="padding-right:20px; margin-left:20px; background-color:#f1f1f1; border:solid thin 1px; border-color:#fff">
                                                <div class="input-group" style="width:100%;background-color:white;color:black">
                                                    <form action="#" method="get" class="sidebar-form" style="width:100%; float:left ; padding-left:0px; padding-right:0px; padding-top:0px">

                                                        <div class="input-group" style="border:solid thin 2px;">
                                                            <input type="text" name="q" class="form-control" placeholder="Search..." style="border:none">
                                                            <span class="input-group-btn" style="background-color:white">
                                                                <button type="submit" name="search" id="search-btn" class="btn btn-flat" style="background-color:#fff;">
                                                                    <i class=" fa fa-search">
                                                                    </i>
                                                                </button>
                                                            </span>
                                                        </div>
                                                    </form>
                                                    <hr style="color:#000; width:100%" />
                                                    <strong style="font-size:x-large; color:black; float:left; text-decoration:underline"><b>JAVASCRIPT CONCEPTS</b></strong>
                                                    <div>

                                                        <ul class=" sidebar-menu pull-left" style="width:100%; ">


                                                            <li class="active treeview pull-left" style="width:100%; text-align:left">

                                                                <ul class="treeview-menu pull-left" style="width:100%; text-align:left">
                                                                    <li>
                                                                        <a href="~/JqJa/GetPosts">
                                                                            <i class="fa fa-fa fa-arrow-right"></i>
                                                                            <span>JavaScript Interviews Questions</span><i class="caret" style="float:right"></i>
                                                                        </a>
                                                                    </li>
                                                                    <li><a href="~/JqJa/Tutorial"><i class="fa fa-fa fa-arrow-right"></i>JavaScrit Tutorial</a></li>

                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>Introduction</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>Explain JavaScript</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>Evironmental Setup</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>Evironmental Setup</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>Html</a></li>


                                                                    <li><a href="~/JqJa/Syntax"><i class=" fa fa-fa fa-arrow-right"></i>JavaScrit Syntax</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>JavaScript Pop Message</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>JavaScript Variables</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>Javascript Operators</a></li>

                                                                    <li><a href="~/JqJa/DataType"><i class=" fa fa-fa fa-arrow-right"></i>JavaScript Data Types</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>JavaScript String</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>JavaScript String Methods</a></li>
                                                                    <li class="active">
                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>JavaScript Numbers</a></li>

                                                                    <li><a href="#" style="color:#000"><i class="fa fa-dot-circle-o"></i>JavaScript Booleans</a></li>
                                                                    <li class="active">
                                                                    <li><a href="products-edit.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript Objects</a></li>
                                                                    <li class="active">
                                                                    <li><a href="~/Admin/Order/Index"><i class="fa fa-fa fa-arrow-right"></i>JavaScript Date</a></li>
                                                                    <li class="active">
                                                                    <li><a href="order-view.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript Array</a></li>



                                                                    <li><a href="~/Admin/infoProducts/Index"><i class="fa fa-fa fa-arrow-right"></i>Array Methods Reference</a></li>
                                                                    <li class="active">
                                                                    <li><a href="products-edit.html"><i class="fa fa-fa fa-arrow-right"></i>null and undefined in JavaScript</a></li>
                                                                    <li class="active">
                                                                    <li><a href="~/Admin/Order/Index"><i class="fa fa-fa fa-arrow-right"></i>JavaScript Functions</a></li>
                                                                    <li class="active">
                                                                    <li><a href="order-view.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript if else Condition</a></li>

                                                                    <li><a href="~/Admin/infoProducts/Index"><i class="fa fa-fa fa-arrow-right"></i>JavaScript switch</a></li>
                                                                    <li class="active">
                                                                    <li><a href="products-edit.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript for Loop</a></li>
                                                                    <li class="active">
                                                                    <li><a href="~/Admin/Order/Index"><i class="fa fa-fa fa-arrow-right"></i>JavaScript - While Loop</a></li>
                                                                    <li class="active">
                                                                    <li><a href="order-view.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript Array</a></li>



                                                                    <li><a href="~/Admin/infoProducts/Index"><i class="fa fa-fa fa-arrow-right"></i>Scope in JavaScript</a></li>
                                                                    <li class="active">
                                                                    <li><a href="products-edit.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript eval</a></li>
                                                                    <li class="active">
                                                                    <li><a href="~/Admin/Order/Index"><i class="fa fa-fa fa-arrow-right"></i>Error handling in JavaScript</a></li>
                                                                    <li class="active">
                                                                    <li><a href="order-view.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript strict mode</a></li>


                                                                    <li><a href="~/Admin/infoProducts/Index"><i class="fa fa-fa fa-arrow-right"></i>JavaScript Hoisting</a></li>

                                                                    <li>
                                                                        <a href="#">
                                                                            <i class="fa fa-folder-open"></i>
                                                                            <span>Advance JavaScript</span><i class="fa fa-angle-left pull-left"></i>
                                                                        </a>
                                                                    </li>

                                                                    <li class="active">
                                                                    <li><a href="products-edit.html"><i class="fa fa-fa fa-arrow-right"></i>Define Class in JavaScript</a></li>
                                                                    <li class="active">
                                                                    <li><a href="~/Admin/Order/Index"><i class="fa fa-fa fa-arrow-right"></i>JavaScript Object in Depth</a></li>
                                                                    <li class="active">
                                                                    <li><a href="order-view.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript - this Keyword</a></li>


                                                                    <li><a href="products-edit.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript new Keyword</a></li>
                                                                    <li class="active">
                                                                    <li><a href="~/Admin/Order/Index"><i class="fa fa-fa fa-arrow-right"></i>Inheritance in JavaScript</a></li>
                                                                    <li class="active">
                                                                    <li><a href="order-view.html"><i class="fa fa-fa fa-arrow-right"></i>JavaScript Closure</a></li>
                                                                    <li><a href="order-view.html"><i class="fa fa-fa fa-arrow-right"></i>Function Expression - IIFE</a></li>
                                                                </ul>
                                                            </li>

                                                        </ul>
                                                    </div>
                                                </div>

                                                <div style="width: 100%;  padding-left: 8px; padding-right:8px; border:none; text-align:left; padding-left:10px; background-color:#000; padding-bottom:-30px">

                                                    <strong style="font-size:x-large; color:white"><b>Related Topics</b></strong>
                                                    @{


                                                        MainProgram.Edm.angulardemoEntities dbgr = new MainProgram.Edm.angulardemoEntities();

                                                        List<MainProgram.Edm.JqJava> Modelr = dbgr.JqJavas.ToList();

                                                        foreach (MainProgram.Edm.JqJava item in Modelr)
                                                        {
                                                            <ul>
                                                                <li>

                                                                    <a href="@Url.Action("Details", "JqJava", new { id = item.JqJavaId })" class="aa-cartbox-img" style="text-align:left; font-family:Arial; font-size:12px; vertical-align:text-bottom" multiple>
                                                                        @item.JqJavaTitle

                                                                    </a>


                                                                </li>
                                                            </ul>
                                                        }
                                                    }







                                                </div>
                                            </fieldset>

                                        </section>
                                        <!-- /.sidebar -->
                                    </aside>
                                </div>
                                <!--End Of Left-->
                                <!--MID Sidebar Main content-->
                                <!-- Content Wrapper. Contains page content -->
                                <div id="fadeshow1" class="Mid-sidebar" style=" border-radius:0px">

                                    <!-- Main content -->
                                    <section>
                                        <div style="border-radius:0px">

                                            <!-- /.col &#58; -->
                                            <div>
                                                <div>
                                                    <div style="width: 100%; margin-left: 0px; border-radius:0px">
                                                        <ul style="text-align:left; font-size:16px;  padding-left:15px">




                                                            <li style="text-align:center"><br> <strong style="font-size:20px; color:red">JavaScript Data Types</strong><br><br></li>




                                                            
                                                            <li style="text-align:left">
                                                                JavaScript includes data types similar to other programming languages like Java or C#. JavaScript is dynamic and loosely typed language. It means you don't require to specify a type of a variable. A variable in JavaScript can be assigned any type of value, as shown in the following example.
                                                            </li>


                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Example: Loosely Typed Variables</strong></li>
                                                            <li style="text-align:left">
                                                                <br>

                                                              
                                                                var myvariable = 1;  // numeric value

                                                                myvariable = 'one'; // string value

                                                                myvariable = 1.1; // decimal value

                                                                myvariable = true; // Boolean value

                                                                myvariable = null; // null value

                                                                <br/>

                                                                In the above example, different types of values are assigned to the same variable to demonstrate loosely typed characteristics of JavaScript. Different values 1, 'one', 1.1, true are examples of different data types.

                                                                JavaScript includes primitive and non-primitive data types as per latest ECMAScript 5.1.
                                                            </li>






                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Primitive Data Types</strong></li>
                                                            <li style="text-align:left; margin-left:10px; margin-right:10px">
                                                                The primitive data types are the lowest level of the data value in JavaScript. The typeof operator can be used with primitive data types to know the type of a value.

                                                                The followings are primitive data types in JavaScript:
                                                            </li>
                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq14.png" style="width: 600px; height: 400px; "></li>

                                                            ,......


                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Structural Data Types</strong></li>
                                                            <li style="text-align:left">
                                                                The structural data types contain some kind of structure with primitive data.<br />

                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq15.png" style="width: 500px; height: 300px; "></li>
                                                            </li>


                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">JavaScript String Literals, Objects, Concatenation, Comparison</strong></li>
                                                            <li style="text-align:left">
                                                                JavaScript statements are separated by a semicolon. However, it is not mandatory to end a statement with a semicolon, but it is recommended.<br/>

                                                                Here you will learn what string is, how to create, compare and concatenate strings in JavaScript.

                                                                String is a primitive data type in JavaScript. A string is textual content. It must be enclosed in single or double quotation marks.

                                                                Example: String literal
                                                                "Hello World"

                                                                'Hello World'
                                                                String value can be assigned to a variable using equal to (=) operator.
                                                                <br />


                                                                Example: String literal assigned to a variable
                                                                var str1 = "Hello World";

                                                                var str2 = 'Hello World';
                                                            </li>



                                                           
                                                            <li style="text-align:left">
                                                                A string can also be treated like zero index based character array.

                                                                Example: String as array
                                                                var str = 'Hello World';

                                                                str[0] // H
                                                                str[1] // e
                                                                str[2] // l
                                                                str[3] // l
                                                                str[4] // o

                                                                str.length //  11
                                                            </li>


                                                            <li style="text-align:left">
                                                                Concatenation<br><br>

                                                                A string is immutable in JavaScript, it can be concatenated using plus (+) operator in JavaScript.

                                                                Example: String concatenation
                                                                var str = 'Hello ' + "World " + 'from ' + 'TutorialsTeacher ';
                                                             
                                                            </li>



                                                            <li style="text-align:left">
                                                                Include quotation marks inside string<br><br>

                                                                Use quotation marks inside string value that does not match the quotation marks surrounding the string value. For example, use single quotation marks if the whole string is enclosed with double quotation marks and visa-versa.

                                                                Example: Quotes in string
                                                                var str1 = "This is 'simple' string";

                                                                var str2 = 'This is "simple" string';

                                                                <br />

                                                                If you want to include same quotes in a string value as surrounding quotes then use backward slash (\) before quotation mark inside string value.

                                                                Example: Quotes in string
                                                                var str1 = "This is \"simple\" string";

                                                                var str2 = 'This is \'simple\' string';
                                                            </li>



                                                            <li style="text-align:left">
                                                                String object<br><br>

                                                                Above, we assigned a string literal to a variable. JavaScript allows you to create a String object using the new keyword, as shown below.

                                                                Example: String object
                                                                var str1 = new String();
                                                                str1 = 'Hello World';

                                                                // or

                                                                var str2 = new String('Hello World');
                                                            </li>


                                                            <li style="text-align:left">
                                                                In the above example, JavaScript returns String object instead of primitive string type. It is recommended to use primitive string instead of String object.

                                                                Caution:

                                                                Be careful while working with String object because comparison of string objects using == operator compares String objects and not the values. Consider the following example.

                                                                Example: String object comparison
                                                                var str1 = new String('Hello World');
                                                                var str2 = new String('Hello World');
                                                                var str3 = 'Hello World';
                                                                var str4 = str1;

                                                                str1 == str2; // false - because str1 and str2 are two different objects
                                                                str1 == str3; // true
                                                                str1 === str4; // true

                                                                typeof(str1); // object
                                                                typeof(str3); //string





                                                            <li style="text-align:left">
                                                                Keywords<br><br>

                                                                Points to Remember:
                                                                JavaScript string must be enclosed in double or single quotes (" " or ' ').
                                                                String can be assigned to a variable using = operator.
                                                                Multiple strings can be concatenated using + operator.
                                                                A string can be treated as character array.
                                                                Use back slash (\) to include quotation marks inside string.
                                                                String objects can be created using new keyword. e.g. var str = new String();
                                                                String methods are used to perform different task on strings.

                                                            </li>
                                                          



                                                            <!--Next chapter................................................-->
                                                            <li style="text-align:left">
                                                                String Methods<br><br>
                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq16.png" style="width: 800px; height: 1000px; "></li>
                                                                
                                                           


                                                            <li style="text-align:left"><br /><br />
                                                                <strong style="font-size:20px; color:red">
                                                                    String Methods for Html
                                                                </strong>
                                                            </li>
                                                            <li style="text-align:left">
                                                                <br>
                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq17.png" style="width: 800px; height: 1100px; "></li>
                                                           



                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Confirm Box</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                                Sometimes you need to take the user's confirmation to proceed. For example, you want to take the user's confirmation before saving updated data or deleting existing data. In this scenario, use the built-in function confirm().

                                                                The confirm() function displays a popup message to the user with two buttons, OK and Cancel. The confirm() function returns true if a user has clicked on the OK button or returns false if clicked on the Cancel button. You can use the return value to process further.

                                                                The following example demonstrates how to display a confirm box and then checks which button the user has clicked.
                                                            </li>


                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Prompt Box</strong></li>
                                                            <li style="text-align:left">
                                                                <br>

                                                                Sometimes you may need to take the user's input to do further actions. For example, you want to calculate EMI based on the user's preferred tenure of the loan. For this kind of scenario, use the built-in function prompt().

                                                                Syntax: prompt([string message], [string defaultValue]);
                                                                <br />
                                                                The prompt() function takes two string parameters. The first parameter is the message to be displayed, and the second parameter is the default value which will be in input text when the message is displayed.
                                                                <br />
                                                                In the above example, the first parameter is a message, and the second parameter is "15" which will be shown to users by default. The prompt() function returns a user entered value. If a user has not entered anything, then it returns null. So it is recommended to check null before proceeding.

                                                                Note: The alert(), confirm(), and prompt() functions are global functions. So, they can be called using the window object e.g. window.alert(), window.confirm(), and window.prompt().
                                                            </li>





                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">JavaScript Variables</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                                Variable means anything that can vary. In JavaScript, a variable stores the data value that can be changed later on.

                                                                Use the reserved keyword var to declare a variable in JavaScript.
                                                            </li>



                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">A variable must have a unique name. The following declares a variable.</strong></li>
                                                            <li style="text-align:left">
                                                                <br>

                                                                var msg; // declaring a variable without assigning a value
                                                                Above, the var msg; is a variable declaration. It does not have any value yet. The default value of variables that do not have any value is undefined.

                                                                You can assign a value to a variable using the = operator when you declare it or after the declaration and before accessing it.
                                                            </li>






                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Example: Variable Initialization</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                                var msg;
                                                                msg = "Hello JavaScript!"; // assigned a string value
                                                                alert(msg); // access a variable

                                                                //the following declares and assign a numeric value
                                                                var num = 100;
                                                                var hundred = num;  // assigned a variable to varible
                                                                In the above example, the msg variable is declared first and then assigned a string value in the next statement. The num variable is declared and initialized with a numeric value in the same statement. Finally, the hundred variable is declared and initialized with another variable's value.

                                                            </li>





                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Multiple Variables Declaration</strong></li>
                                                            <li style="text-align:left">
                                                                JavaScript allows multiple white spaces and line breaks when you declare a variable with var keyword.
                                                                Loosely-typed Variables
                                                                C# or Java has strongly typed variables. It means a variable must be declared with the data type that specifies the type of data a variable will store.

                                                                JavaScript is a loosely typed language. It means it does not require a data type to be declared. You can assign any literal values to a variable, e.g., string, integer, float, boolean, etc.
                                                                <br />
                                                                Example: Loosely Typed Variables
                                                                var myvariable = 1;  // numeric value

                                                                myvariable = 'one'; // string value

                                                                myvariable = 1.1; // decimal value

                                                                myvariable = true; // Boolean value

                                                                myvariable = null; // null value

                                                                <br />

                                                                Variable Scope
                                                                In JavaScript, a variable can be declared either in the global scope or the local scope.

                                                                Global Variables
                                                                Variables declared out of any function are called global variables. They can be accessed anywhere in the JavaScript code, even inside any function.

                                                                Local Variables
                                                                Variables declared inside the function are called local variables to that function. They can only be accessed in the function where they are declared but not outside.

                                                                The following example includes global and local variables.

                                                                <br /><br />
                                                                Example: Global and Local Variable
                                                                var greet = "Hello " // global variable

                                                                function myfunction(){
                                                                var msg = "JavaScript!";
                                                                alert(greet + msg); //can access global and local variable
                                                                }

                                                                myfunction();

                                                                alert(greet);//can access global variable
                                                                alert(msg); //error: can't access local variable

                                                            </li>






                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Declare Variables without the var Keyword</strong></li>
                                                            <li style="text-align:left">
                                                                <br>

                                                                Variables can be declared and initialize without the var keyword. However, a value must be assigned to a variable declared without the var keyword.

                                                                The variables declared without the var keyword becomes global variables, irrespective of where they are declared. Visit Variable Scope in JavaScript to learn about it.

                                                                It is Not Recommended to declare a variable without var keyword because it can accidentally overwrite an existing global variable.<br />
                                                            </li>




                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Javascript Operators</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                                JavaScript includes operators same as other languages. An operator performs some operation on single or multiple operands (data value) and produces a result. For example, in 1 + 2, the + sign is an operator and 1 is left side operand and 2 is right side operand. The + operator performs the addition of two numeric values and returns a result.<br />
                                                            </li>
                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq8.png" style="width: 500px; height: 300px; "></li>





                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">JavaScript includes following categories of operators.</strong></li>
                                                            <li style="text-align:left"><br />



                                                            <li style="text-align:left">
                                                                <br>
                                                                Arithmetic Operators,
                                                                Comparison Operators,
                                                                Logical Operators,
                                                                Assignment Operators,
                                                                Conditional Operators
                                                                Ternary Operator
                                                            </li>

                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq9.png" style="width: 500px; height: 300px; "></li>
                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Arithmetic operators are used to perform mathematical operations between numeric operands.</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                                The ++ and -- operators are unary operators. It works with either left or right operand only. When used with the left operand, e.g., x++, it will increase the value of x when the program control goes to the next statement. In the same way, when it is used with the right operand, e.g., ++x, it will increase the value of x there only. Therefore, x++ is called post-increment, and ++x is called pre-increment.

                                                                Example: Post and Pre Increment/Decrement
                                                                var x = 5;

                                                                x++; //post-increment, x will be 5 here and 6 in the next line

                                                                ++x; //pre-increment, x will be 7 here

                                                                x--; //post-decrement, x will be 7 here and 6 in the next line

                                                                --x; //pre-decrement, x will be 5 here
                                                            </li>

                                                            ......




                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">String Concatenation</strong></li>
                                                            <li style="text-align:left">
                                                                <br>

                                                                The + operator performs concatenation operation when one of the operands is of string type. The following example demonstrates string concatenation even if one of the operands is a string.

                                                                Example: + Operator with String
                                                                var a = 5, b = "Hello ", c = "World!", d = 10;

                                                                a + b; //returns "5Hello "

                                                                b + c; //returns "Hello World!"

                                                                a + d; //returns 15

                                                                b + true; //returns "Hello true"

                                                                c - b; //returns NaN; - operator can only used with numbers
                                                            </li>




                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Comparison Operators</strong></li>

                                                            <li>
                                                                JavaScript provides comparison operators that compare two operands and return a boolean value true or false.

                                                            </li>

                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq10.png" style="width: 500px; height: 300px; "></li>

                                                            <li style="text-align:left">
                                                                <br>

                                                                Above, the 'script' src="/MyJavaScriptFile.js"> points to the external JavaScript file using the src="/MyJavaScriptFile.js" attribute where the value of the src attribute is the path or url from which a file needs to be loaded in the browser. Note that you can load the files from your domain as well as other domains.
                                                            </li>

                                                            <li style="text-align:left">
                                                                <br>

                                                                The following example demonstrates the comparison operators.

                                                                Example: JavaScript Comparison Operators
                                                                var a = 5, b = 10, c = "5";
                                                                var x = a;

                                                                a == c; // returns true,

                                                                a === c; // returns false,

                                                                a == x; // returns true,

                                                                a != b; // returns true,

                                                                a > b; // returns false,

                                                                a < b; // returns true,

                                                                a >= b; // returns false,

                                                                a <= b; // returns true
                                                            </li>,




                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Logical Operators</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                            <li>In JavaScript, the logical operators are used to combine two or more conditions. JavaScript provides the following logical operators.</li>
                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq11.png" style="width: 550px; height: 350px; "></li>





                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Example: Logical Operators</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                            <li>
                                                                var a = 5, b = 10;

                                                                (a != b) && (a < b); // returns true

                                                                (a > b) || (a == b); // returns false

                                                                (a < b) || (a == b); // returns true

                                                                !(a < b); // returns false

                                                                !(a > b); // returns true.
                                                            </li>
                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq12.png" style="width: 550px; height: 350px; "></li>






                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Example: Assignment operators</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                            <li>
                                                                var x = 5, y = 10, z = 15;

                                                                x = y; //x would be 10

                                                                x += 1; //x would be 6

                                                                x -= 1; //x would be 4

                                                                x *= 5; //x would be 25

                                                                x /= 5; //x would be 1

                                                                x %= 2; //x would be 1.
                                                            </li>




                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Ternary Operator</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                            <li>  <condition> ? <value1> : <value2>;</li>
                                                            <li>
                                                                JavaScript provides a special operator called ternary operator :? that assigns a value to a variable based on some condition. This is the short form of the if else condition.
                                                                The ternary operator starts with conditional expression followed by the ? operator. The second part (after ? and before :) will be executed if the condition turns out to be true. Suppose, the condition returns false, then the third part (after :) will be executed.
                                                            </li>
                                                            Example: Ternary operator
                                                            var a = 10, b = 5;

                                                            var c = a > b? a : b; // value of c would be 10
                                                            var d = a > b? b : a; // value of d would be 5
                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq11.png" style="width: 550px; height: 350px; "></li>





                                                            <li style="text-align:left"><strong style="font-size:20px; color:red">Logical Operators</strong></li>
                                                            <li style="text-align:left">
                                                                <br>
                                                            <li>In JavaScript, the logical operators are used to combine two or more conditions. JavaScript provides the following logical operators.</li>
                                                            <li style="text-align:left"><img src="~/Content/img/Fly/jq13.png" style="width: 500px; height: 300px; "></li>



                                                        </ul>




                                                        <br />


                                                        <div>
                                                            @Html.ActionLink("Back to HomePage", "Index", "Home")
                                                        </div>
                                                    </div>
                                                    <!-- /. box -->
                                                </div>
                                                <!-- /.col -->
                                            </div>
                                        </div>
                                        <!-- /.row -->
                                    </section>
                                    <!-- /.content -->
                                </div>
                                <!-- /.content-wrapper -->

                            </div>
                        </div><!--End Of MID-->







                    </div>


                    <style>
                        @@media only screen and (max-width:1026px) {
                            #fadeshow1 {
                                display: none;
                            }
                        }
                    </style>


                    <style>
                        .content-wrapper {
                            margin-top: 0%;
                            margin-left: 0%;
                            background-position: top;
                        }

                        #left {
                            width: 30%;
                            margin-left: 0%;
                            margin-top: 0%;
                            background-position: top;
                            position: relative;
                            background-color: #eee3e3;
                        }



                        .Mid-sidebar {
                            content: " ";
                            position: relative;
                            margin-top: 0%;
                            width: 72%;
                            overflow: no-display;
                            padding-right: 30px;
                            margin-left: 28%;
                            margin-right: 0%;
                            background-position: top;
                            margin-bottom: 0px;
                            background-color: #fff;
                        }


                        .SiteT {
                            width: 100%;
                            border: none;
                            margin-right: 0px;
                            padding-right: 0px;
                        }



                        #bcolor {
                            background-image: url(/Content/images/HomePic/bg.jpeg);
                        }
                    </style>

                </div>
            </div>
        </div>


    </section>




</body>
</html>

<!-- AdminLTE for demo purposes -->
<script src="~/ontent/theme/dist/js/demo.js" type="text/javascript"></script>



<script src="Content/theme/bower_components/moment/moment.js"></script>
<script src="~/Content/theme/plugins/fullcalendar/fullcalendar.min.js"></script>
<link href="~/Content/theme/plugins/fullcalendar/fullcalendar.print.css" rel="stylesheet" />
<link href="~/Content/theme/plugins/fullcalendar/fullcalendar.css" rel="stylesheet" />
<script src="~/Content/theme/plugins/fullcalendar/fullcalendar.js"></script>

<link href="~/Content/theme/plugins/fullcalendar/fullcalendar.min.css" rel="stylesheet" />

<!-- jQuery 3 -->
<script src="~/Content/theme/bower_components/jquery/dist/jquery.min.js"></script>
<!-- Bootstrap 3.3.7 -->
<script src="~/Content/theme/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
<!-- FastClick -->
<script src="~/Content/theme/bower_components/fastclick/lib/fastclick.js"></script>
<!-- AdminLTE App -->
<script src="~/dist/js/adminlte.min.js"></script>

<script src="~/Content/theme/bower_components/chart.js/Chart.js"></script>
<!-- AdminLTE dashboard demo (This is only for demo purposes) -->
<script src="~/Content/theme/bower_components/fastclick/lib/fastclick.js"></script>
